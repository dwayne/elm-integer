#!/usr/bin/env bash

#
# USAGE: [root=path] [optimize_js=0|1|2|3] build-examples-calculator
#

set -euo pipefail

root="${root:-}"
optimize_js="${optimize_js:-0}"

src="${project:?}/examples/calculator"
out="${build:?}/examples/calculator"
web_root="$out/${root}"

clean () {
  rm -rf "$out"
}

prepare_web_root () {
  mkdir -p "$web_root"
}

build_html () {
  cp "$src"/html/*.html "$web_root"
}

build_js () {
  case "${optimize_js}" in
    1|2|3)
      func=build_js_optimize_"$optimize_js"
      ;;
    *)
      func=build_js_debug
      ;;
  esac

  "$func" "$src/src/Main.elm" "$web_root/calculator.js"
}

build_js_debug () {
  elm make "$1" --debug --output "$2"
}

build_js_optimize_1 () {
  elm make "$1" --optimize --output "$2"
  minify "$2"
}

build_js_optimize_2 () {
  elm-optimize-level-2 "$1" --output "$2"
  minify "$2"
}

build_js_optimize_3 () {
  elm-optimize-level-2 "$1" --optimize-speed --output "$2"
  minify "$2"
}

minify () {
  js="$1"
  min="${js%.js}.min.js"

  terser "$js" --compress 'pure_funcs="F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9",pure_getters,keep_fargs=false,unsafe_comps,unsafe' | terser --mangle --output "$min"
  mv "$min" "$js"
}

cd "$src" && clean && prepare_web_root && build_html && build_js
